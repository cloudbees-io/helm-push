apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: helm-push
description: 'Publish a Helm chart'

inputs:
  chart:
    description: Path to the packaged chart.
    required: true
  remote:
    description: Registry to publish the chart to.
    required: true
  commit:
    description: >
      The commit ID from the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.sha }}
  repository-url:
    description: >
      The clone URL of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.repositoryUrl }}
  ref:
    description: >
      The ref or branch of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.ref }}


outputs:
  chart:
    description: The image reference pointing to the chart upload location.
    value: ${{ steps.push.outputs.chart }}
  version:
    description: Version of the uploaded chart.
    value: ${{ steps.push.outputs.version }}
  artifact-id:
    description: The unique identifier of the artifact.
    value: ${{ steps.push.outputs.artifact-id }}

runs:
  using: composite
  steps:
    - id: push
      name: Publish Helm chart
      uses: docker://alpine/helm:3.18.6
      run: |
        set -u
        CHART_NAME="$(helm show chart "$CHART" | grep -E '^name: ' | sed -E 's/^name: //')"
        CHART_VERSION="$(helm show chart "$CHART" | grep -E '^version: ' | sed -E 's/^version: //')"
        printf %s "${REMOTE}/${CHART_NAME}" > $CLOUDBEES_OUTPUTS/chart
        printf %s "${CHART_VERSION}" > $CLOUDBEES_OUTPUTS/version
        set -x
        helm_push_output=$(helm push "$CHART" "$REMOTE" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Chart pushed successfully!"
            echo $helm_push_output
            # Extract the digest
            digest=$(echo "$helm_push_output" | grep -i 'Digest' | awk '{print $2}')
            echo "Digest: $digest"
            commit="${{ inputs.commit }}"
            repository_url="${{ inputs.repository-url }}"
            ref="${{ inputs.ref }}"
            # Publish build artifact
            json_payload='{
              "runId": "'"$RUN_ID"'",
              "runAttempt": '"$RUN_ATTEMPT"',
              "name": "'"$CHART_NAME"'",
              "version": "'"$CHART_VERSION"'",
              "url": "'"$REMOTE"/"$CHART_NAME":"$CHART_VERSION"'",
              "type": "helm",
              "digest":"'$digest'",
              "commit": {
                "repositoryUrl": "'"$repository_url"'",
                "commitId": "'"$commit"'",
                "ref": "'"$ref"'"
              }
            }'        
            response=$(curl --retry-delay 5 --retry 3 --retry-connrefused --fail-with-body  -X 'POST' "$URL/v3/artifactinfos" -H "Authorization: Bearer $API_TOKEN" -H 'Content-Type: application/json' --data-binary "$json_payload") || command_failed=1
            # Check curl exit code
            if [ ${command_failed:-0} -eq 1 ];
            then
              echo "ERROR: failed to save artifact information: '$response'"
              exit 1
            else
              echo "Artifact details pushed to platform successfully"
        
              # Extract the artifactId
              id=$(echo "$response" | grep -o '"id": *"[^"]*"' | sed 's/.*"id": *"\([^"]*\)".*/\1/')
            
              # Set it as an output
              printf %s "$id" > $CLOUDBEES_OUTPUTS/artifact-id
            fi
        else
            echo "Failed to push the chart."
            echo "Error: $helm_push_output"
            exit 1
        fi  
      env:
        CHART: ${{ inputs.chart }}
        REMOTE: ${{ inputs.remote }}
        API_TOKEN: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        RUN_ID: ${{ cloudbees.run_id }}
        RUN_ATTEMPT: ${{ cloudbees.run_attempt }}
